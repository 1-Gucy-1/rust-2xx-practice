fn gen_random_vector(n: usize) -> Vec<i32> {
    let mut seed: u32 = 12345; 
    let mut vec = Vec::with_capacity(n);

    for _ in 0..n {
        seed = seed.wrapping_mul(1664525).wrapping_add(1013904223);
        let random_number = (seed % 90 + 10) as i32; 
        vec.push(random_number);
    }

    vec
}

fn min_adjacent_sum(data: &[i32]) -> (i32, usize, usize) {
    let mut min_sum = i32::MAX;
    let mut min_index = 0;

    for i in 0..data.len() - 1 {
        let sum = data[i] + data[i + 1];
        if sum < min_sum {
            min_sum = sum;
            min_index = i;
        }
    }

    (min_sum, min_index, min_index + 1)
}

fn print_result(data: &[i32]) {

    print!("indexes: ");
    for i in 0..data.len() {
        print!("{:>3}. ", i);
    }
    println!();

    print!("data:    ");
    for &num in data {
        print!("{:>3} ", num);
    }
    println!();

    let (min_sum, idx1, idx2) = min_adjacent_sum(data);

    print!("indexes: ");
    for i in 0..data.len() {
        if i == idx1 {
            print!(" \\__ ");
        } else if i == idx2 {
            print!("__/ ");
        } else {
            print!("     ");
        }
    }
    println!();

    println!(
        "min adjacent sum={}+{}={} at indexes:{},{}",
        data[idx1], data[idx2], min_sum, idx1, idx2
    );
}

fn main() {
    let data = gen_random_vector(20);
    print_result(&data);
}
