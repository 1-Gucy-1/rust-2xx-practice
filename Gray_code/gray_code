- Опис функції,- Сигнатура функції
- Тест-кейси

//
Function should look like

fn gray(n: u8) -> Vec<String>

This test should pass

#[test]
fn test() {
   let test_data =
       [
           (0, vec!("")),
           (1, vec!("0", "1")),
           (2, vec!("00", "01", "10", "11")),
           (3, vec!("000", "001", "010", "011", 
                    "100", "101", "110", "111")),
           (4, vec!("0000", "0001", "0010", "0011", 
                    "0100", "0101", "0110", "0111", 
                    "1000", "1001", "1010", "1011",
                    "1100", "1101", "1110", "1111")),
       ];


   test_data
       .iter()
       .for_each(|(n, out)| 
           assert_eq!(gray(*n), *out)
       );
}


//

Опис функції
Призначення:
Функція gray генерує всі можливі двійкові комбінації заданої довжини n, представлені у вигляді рядків. В результаті вона повертає вектор цих комбінацій, де кожна комбінація представлена як рядок.

Вхідні параметри:
n (типу u8): кількість бітів (довжина кожної двійкової комбінації). Наприклад, якщо n = 2, то функція поверне всі комбінації з двох бітів, такі як "00", "01", "10", "11".
Вихідне значення:
Функція повертає вектор Vec<String>, в якому кожен елемент — рядок з двійковою комбінацією довжини n.

Якщо n = 0, результат — пустий рядок vec![""].
Якщо n = 1, результат — vec!["0", "1"].
Якщо n = 2, результат — vec!["00", "01", "10", "11"].

Сигнатура функції
Функція має таку сигнатуру:
fn gray(n: u8) -> Vec<String>

fn — ключове слово, що означає визначення функції.
gray — ім'я функції.
n: u8 — параметр функції, який приймає значення типу u8 (від 0 до 255).
-> Vec<String> — тип повернення. Функція повертає Vec<String>, тобто вектор, де кожен елемент є рядком.

Тест-кейси
Тест-кейси перевіряють, чи функція gray коректно генерує всі можливі двійкові комбінації для різних значень n. Наприклад:

Якщо n = 0, функція повинна повернути vec![""], оскільки немає бітів, з яких можна створити комбінації.
Якщо n = 1, функція повинна повернути vec!["0", "1"], дві можливі комбінації для одного біта.
Якщо n = 2, функція повинна повернути vec!["00", "01", "10", "11"], чотири комбінації з двох бітів.
Код тест-кейсів:

#[test]
fn test() {
    let test_data = [
        (0, vec![""]),
        (1, vec!["0", "1"]),
        (2, vec!["00", "01", "10", "11"]),
        (3, vec!["000", "001", "010", "011", "100", "101", "110", "111"]),
        (4, vec![
            "0000", "0001", "0010", "0011", 
            "0100", "0101", "0110", "0111", 
            "1000", "1001", "1010", "1011",
            "1100", "1101", "1110", "1111"
        ]),
    ];

    test_data.iter().for_each(|(n, out)| 
        assert_eq!(gray(*n), *out)
    );
}

Пояснення тест-кейсів:
test_data містить кілька вхідних значень n та відповідні очікувані вихідні значення.
test_data.iter().for_each(...) виконує ітерацію для кожної пари (n, out), де:
assert_eq!(gray(*n), *out) перевіряє, чи функція gray повертає очікуване значення out для заданого n.
