fn rotate(s: String, n: isize) -> String {
    let len = s.len() as isize; // Довжина рядка
    let shift = ((n % len) + len) % len; // Зсув у межах довжини рядка
    let split_index = (len - shift) as usize;

    // Об'єднуємо дві частини рядка, щоб створити обернений рядок
    s[split_index..].to_string() + &s[..split_index]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        let s = "abcdefgh".to_string();
        let shifts = [
            (0,  "abcdefgh"),
            (8,  "abcdefgh"),
            (-8, "abcdefgh"),
            (1,  "habcdefg"),
            (2,  "ghabcdef"),
            (10, "ghabcdef"),
            (-1, "bcdefgha"),
            (-2, "cdefghab"),
            (-10,"cdefghab"),
        ];

        shifts
            .iter()
            .for_each(|(n, exp)| {
                assert_eq!(rotate(s.clone(), *n), exp.to_string());
            });
    }
}

fn main() {
    let result = rotate("abcdefgh".to_string(), 2);
    println!("Rotated result: {}", result);
}
